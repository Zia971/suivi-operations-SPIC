"""
Application Streamlit SPIC 2.0 - VERSION COMPL√àTE ET MODERNE
Gestion des op√©rations immobili√®res avec interface √©pur√©e et collaborative
Int√©gration: alertes intelligentes, timeline color√©e, statuts automatiques, module REM
Optimis√© pour performance Streamlit avec cache et sessions
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional
import plotly.express as px
import plotly.graph_objects as go
import base64
from io import BytesIO
import time

# Import des modules personnalis√©s
import config
import database
import utils

# ============================================================================
# CONFIGURATION STREAMLIT
# ============================================================================

st.set_page_config(
    page_title="SPIC 2.0 - Suivi Op√©rations",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': "SPIC 2.0 - Application de suivi des op√©rations immobili√®res"
    }
)

# CSS personnalis√© pour interface moderne et collaborative
st.markdown("""
<style>
    /* Variables CSS pour coh√©rence */
    :root {
        --primary-color: #3b82f6;
        --secondary-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --success-color: #22c55e;
        --border-radius: 12px;
        --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    
    /* Header principal */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: var(--border-radius);
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }
    
    .main-header h1 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }
    
    .main-header p {
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
    }
    
    /* Cartes m√©triques modernes */
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        border-left: 4px solid var(--primary-color);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        height: 100%;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.1);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin: 0.5rem 0;
    }
    
    .metric-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .metric-delta {
        font-size: 0.8rem;
        margin-top: 0.5rem;
    }
    
    .metric-delta.positive { color: var(--success-color); }
    .metric-delta.negative { color: var(--danger-color); }
    .metric-delta.neutral { color: #6b7280; }
    
    /* Cards d'alertes et notifications */
    .alert-card {
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid var(--danger-color);
    }
    
    .success-card {
        background: #f0fdf4;
        border: 1px solid #bbf7d0;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid var(--success-color);
    }
    
    .warning-card {
        background: #fffbeb;
        border: 1px solid #fed7aa;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid var(--warning-color);
    }
    
    .info-card {
        background: #f0f9ff;
        border: 1px solid #bae6fd;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid var(--primary-color);
    }
    
    /* Cards de phases avec couleurs dynamiques */
    .phase-card {
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    .phase-card:hover {
        transform: translateX(4px);
        box-shadow: var(--shadow);
    }
    
    .phase-validee { 
        border-left-color: var(--success-color); 
        background: #f0fdf4; 
    }
    .phase-en-cours { 
        border-left-color: var(--warning-color); 
        background: #fffbeb; 
    }
    .phase-bloquee { 
        border-left-color: var(--danger-color); 
        background: #fef2f2; 
    }
    .phase-attente { 
        border-left-color: #6b7280; 
        background: #f9fafb; 
    }
    
    /* Sidebar modernis√©e */
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8fafc 0%, #e2e8f0 100%);
        border-radius: var(--border-radius);
    }
    
    /* Onglets modernes */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background: #f8fafc;
        border-radius: var(--border-radius);
        padding: 4px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        background-color: transparent;
        border-radius: 8px;
        color: #475569;
        font-weight: 500;
        transition: all 0.2s ease;
        padding: 0 1rem;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #e2e8f0;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: var(--primary-color) !important;
        color: white !important;
        box-shadow: var(--shadow);
    }
    
    /* Timeline container */
    .timeline-container {
        background: white;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        box-shadow: var(--shadow);
        margin: 1rem 0;
    }
    
    /* Boutons personnalis√©s */
    .custom-button {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-block;
    }
    
    .custom-button:hover {
        background: #2563eb;
        transform: translateY(-1px);
        box-shadow: var(--shadow);
    }
    
    .custom-button.secondary {
        background: #6b7280;
    }
    
    .custom-button.success {
        background: var(--success-color);
    }
    
    .custom-button.warning {
        background: var(--warning-color);
    }
    
    .custom-button.danger {
        background: var(--danger-color);
    }
    
    /* Progress bars modernes */
    .progress-container {
        background: #e5e7eb;
        border-radius: 50px;
        height: 8px;
        overflow: hidden;
        margin: 0.5rem 0;
    }
    
    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        border-radius: 50px;
        transition: width 0.3s ease;
    }
    
    /* Tables am√©lior√©es */
    .stDataFrame {
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--shadow);
    }
    
    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.3s ease-out;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 1.5rem;
        }
        
        .metric-card {
            padding: 1rem;
        }
        
        .metric-value {
            font-size: 1.5rem;
        }
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #a1a1a1;
    }
</style>
""", unsafe_allow_html=True)

# ============================================================================
# INITIALISATION ET GESTION DES SESSIONS
# ============================================================================

@st.cache_resource
def init_database():
    """Initialise la base de donn√©es avec cache pour performance"""
    return database.DatabaseManager()

def init_session_state():
    """Initialise les variables de session Streamlit"""
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard_manager"
    
    if 'operation_detail_id' not in st.session_state:
        st.session_state.operation_detail_id = None
    
    if 'selected_aco' not in st.session_state:
        st.session_state.selected_aco = None
    
    if 'show_aco_management' not in st.session_state:
        st.session_state.show_aco_management = False
    
    if 'notifications' not in st.session_state:
        st.session_state.notifications = []
    
    if 'last_refresh' not in st.session_state:
        st.session_state.last_refresh = datetime.now()

def add_notification(message: str, type_notif: str = "info", duration: int = 5):
    """Ajoute une notification temporaire"""
    notification = {
        'id': datetime.now().timestamp(),
        'message': message,
        'type': type_notif,
        'timestamp': datetime.now(),
        'duration': duration
    }
    st.session_state.notifications.append(notification)

def display_notifications():
    """Affiche les notifications actives"""
    current_time = datetime.now()
    active_notifications = []
    
    for notif in st.session_state.notifications:
        if (current_time - notif['timestamp']).seconds < notif['duration']:
            active_notifications.append(notif)
            
            if notif['type'] == 'success':
                st.success(notif['message'])
            elif notif['type'] == 'error':
                st.error(notif['message'])
            elif notif['type'] == 'warning':
                st.warning(notif['message'])
            else:
                st.info(notif['message'])
    
    st.session_state.notifications = active_notifications

# ============================================================================
# FONCTIONS UTILITAIRES INTERFACE
# ============================================================================

def display_metric_card(label: str, value: str, delta: str = None, delta_type: str = "neutral"):
    """Affiche une carte m√©trique moderne"""
    
    delta_class = f"metric-delta {delta_type}" if delta else ""
    delta_html = f'<div class="{delta_class}">{delta}</div>' if delta else ""
    
    st.markdown(f"""
    <div class="metric-card fade-in">
        <div class="metric-label">{label}</div>
        <div class="metric-value">{value}</div>
        {delta_html}
    </div>
    """, unsafe_allow_html=True)

def display_progress_bar(percentage: float, label: str = "", color: str = "primary"):
    """Affiche une barre de progression moderne"""
    
    color_map = {
        "primary": "var(--primary-color)",
        "success": "var(--success-color)",
        "warning": "var(--warning-color)",
        "danger": "var(--danger-color)"
    }
    
    bar_color = color_map.get(color, color_map["primary"])
    
    st.markdown(f"""
    <div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.25rem;">
            <span style="font-size: 0.9rem; color: #374151;">{label}</span>
            <span style="font-size: 0.9rem; font-weight: 600; color: {bar_color};">{percentage:.1f}%</span>
        </div>
        <div class="progress-container">
            <div class="progress-bar" style="width: {percentage}%; background: {bar_color};"></div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def display_status_badge(status: str):
    """Affiche un badge de statut color√©"""
    
    status_colors = {
        "üü° √Ä l'√©tude": "#fbbf24",
        "üõ†Ô∏è En consultation": "#f97316",
        "üìã March√© attribu√©": "#3b82f6",
        "üöß En travaux": "#8b5cf6",
        "üì¶ Livr√© (non sold√©)": "#06b6d4",
        "‚úÖ Cl√¥tur√© (sold√©)": "#22c55e",
        "üî¥ Bloqu√©": "#ef4444"
    }
    
    color = status_colors.get(status, "#6b7280")
    
    st.markdown(f"""
    <span style="
        background: {color}20;
        color: {color};
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        border: 1px solid {color}40;
    ">{status}</span>
    """, unsafe_allow_html=True)

def create_action_buttons(operation_id: int, show_detail: bool = True, show_edit: bool = False):
    """Cr√©e des boutons d'action pour une op√©ration"""
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if show_detail and st.button("üëÅÔ∏è Voir d√©tail", key=f"detail_{operation_id}"):
            st.session_state.operation_detail_id = operation_id
            st.session_state.current_page = "detail_operation"
            st.rerun()
    
    with col2:
        if show_edit and st.button("‚úèÔ∏è Modifier", key=f"edit_{operation_id}"):
            # TODO: Impl√©menter la modification
            add_notification("Fonction de modification en cours de d√©veloppement", "info")
    
    with col3:
        if st.button("üìä Analytics", key=f"analytics_{operation_id}"):
            # TODO: Impl√©menter les analytics
            add_notification("Vue analytics en cours de d√©veloppement", "info")

# ============================================================================
# PAGES PRINCIPALES
# ============================================================================

def render_dashboard_manager():
    """Page tableau de bord Manager avec design moderne et collaboratif"""
    
    st.markdown("""
    <div class="main-header">
        <h1>üìä Tableau de Bord Manager</h1>
        <p>Vue d'ensemble des op√©rations et indicateurs cl√©s de performance</p>
    </div>
    """, unsafe_allow_html=True)
    
    db = init_database()
    
    # R√©cup√©ration des donn√©es avec gestion d'erreur
    try:
        with st.spinner("Chargement des donn√©es..."):
            kpi_data = db.get_kpi_data()
            operations = db.get_operations(with_risk_score=True, limit=50)
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        return
    
    if not kpi_data:
        st.warning("Aucune donn√©e disponible. Cr√©ez d'abord une op√©ration.")
        return
    
    # Section m√©triques principales
    st.markdown("### üìà Indicateurs Cl√©s de Performance")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_card(
            "Total Op√©rations", 
            str(kpi_data.get('total_operations', 0)),
            f"+{kpi_data.get('nouvelles_operations_semaine', 0)} cette semaine",
            "positive" if kpi_data.get('nouvelles_operations_semaine', 0) > 0 else "neutral"
        )
    
    with col2:
        avancement = kpi_data.get('avancement_moyen', 0)
        color = "success" if avancement >= 70 else "warning" if avancement >= 40 else "danger"
        display_metric_card(
            "Avancement Moyen",
            f"{avancement:.1f}%",
            "Performance globale du portfolio",
            "neutral"
        )
    
    with col3:
        bloquees = kpi_data.get('operations_bloquees', 0)
        color = "danger" if bloquees > 0 else "success"
        display_metric_card(
            "Op√©rations Bloqu√©es",
            str(bloquees),
            "N√©cessitent une action imm√©diate" if bloquees > 0 else "Aucun blocage actuel",
            "danger" if bloquees > 0 else "success"
        )
    
    with col4:
        alertes = kpi_data.get('alertes_actives', 0)
        color = "danger" if alertes > 5 else "warning" if alertes > 0 else "success"
        display_metric_card(
            "Alertes Actives",
            str(alertes),
            f"Niveau d'attention requis",
            "danger" if alertes > 3 else "warning" if alertes > 0 else "success"
        )
    
    # Section REM si disponible
    if kpi_data.get('rem_totale_portfolio', 0) > 0:
        st.markdown("### üí∞ Performance Financi√®re")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            display_metric_card(
                "REM Portfolio",
                utils.format_currency(kpi_data['rem_totale_portfolio']),
                f"{kpi_data.get('operations_avec_rem', 0)} op√©rations g√©n√©ratrices",
                "success"
            )
        
        with col2:
            budget_total = kpi_data.get('budget_total_portfolio', 0)
            if budget_total > 0:
                display_metric_card(
                    "Budget Portfolio",
                    utils.format_currency(budget_total),
                    "Investissement total en cours",
                    "neutral"
                )
        
        with col3:
            if budget_total > 0 and kpi_data['rem_totale_portfolio'] > 0:
                ratio_rem = (kpi_data['rem_totale_portfolio'] / budget_total) * 100
                display_metric_card(
                    "Ratio REM/Budget",
                    f"{ratio_rem:.2f}%",
                    "Efficacit√© des investissements",
                    "success" if ratio_rem > 5 else "warning"
                )
    
    st.markdown("---")
    
    # Section graphiques
    col_left, col_right = st.columns(2)
    
    with col_left:
        st.markdown("### üìä R√©partition par Statut")
        try:
            charts = utils.generate_kpi_charts_streamlit(kpi_data)
            if 'statuts' in charts:
                st.plotly_chart(charts['statuts'], use_container_width=True)
            else:
                st.info("Donn√©es de statut non disponibles")
        except Exception as e:
            st.error(f"Erreur g√©n√©ration graphique statuts : {e}")
    
    with col_right:
        st.markdown("### üìà R√©partition par Type")
        try:
            if 'types' in charts:
                st.plotly_chart(charts['types'], use_container_width=True)
            else:
                st.info("Donn√©es de type non disponibles")
        except Exception as e:
            st.error(f"Erreur g√©n√©ration graphique types : {e}")
    
    # Graphique d'avancement global
    if 'avancement' in charts:
        st.markdown("### üìä Avancement Global")
        st.plotly_chart(charts['avancement'], use_container_width=True)
    
    st.markdown("---")
    
    # Section TOP 3 Op√©rations √† Risque - LOGIQUE AUTOMATIQUE
    st.markdown("### üö® TOP 3 Op√©rations √† Risque")
    st.markdown("*Calcul automatique bas√© sur le journal, les blocages et l'avancement*")
    
    try:
        operations_risque = db.get_operations_at_risk(limit=3)
        
        if operations_risque:
            for i, operation in enumerate(operations_risque, 1):
                with st.expander(f"ü•á #{i} - {operation.get('nom', 'N/A')} - Score: {operation.get('score_risque', 0):.1f}/100", expanded=(i == 1)):
                    col1, col2, col3 = st.columns([2, 2, 1])
                    
                    with col1:
                        st.write(f"**Type:** {operation.get('type_operation', 'N/A')}")
                        st.write(f"**Responsable:** {operation.get('responsable_aco', 'N/A')}")
                        display_status_badge(operation.get('statut_principal', 'N/A'))
                        
                        # Barre de progression
                        avancement = operation.get('pourcentage_avancement', 0)
                        color = "success" if avancement > 70 else "warning" if avancement > 30 else "danger"
                        display_progress_bar(avancement, "Avancement", color)
                    
                    with col2:
                        st.write("**Raisons du risque:**")
                        raisons = operation.get('raisons_risque', [])
                        if raisons:
                            for raison in raisons:
                                st.markdown(f"‚Ä¢ {raison}")
                        else:
                            st.write("‚Ä¢ Score de risque √©lev√© selon crit√®res automatiques")
                        
                        # Alertes et blocages
                        if operation.get('alertes_actives', 0) > 0:
                            st.markdown(f"""
                            <div class="alert-card">
                                üö® {operation['alertes_actives']} alerte(s) active(s)
                            </div>
                            """, unsafe_allow_html=True)
                        
                        if operation.get('blocages_actifs', 0) > 0:
                            st.markdown(f"""
                            <div class="alert-card">
                                üî¥ {operation['blocages_actifs']} blocage(s) actif(s)
                            </div>
                            """, unsafe_allow_html=True)
                    
                    with col3:
                        create_action_buttons(operation['id'], show_detail=True)
                        
                        # REM si disponible
                        if operation.get('rem_annuelle_prevue', 0) > 0:
                            st.markdown(f"""
                            <div class="info-card">
                                üí∞ REM: {utils.format_currency(operation['rem_annuelle_prevue'])}
                            </div>
                            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="success-card">
                üéâ Excellente nouvelle ! Aucune op√©ration √† risque √©lev√© d√©tect√©e.
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erreur lors du calcul des risques : {e}")
    
    # Section graphique analyse des risques
    if operations_risque:
        st.markdown("### üìà Analyse D√©taill√©e des Risques")
        try:
            risk_chart = utils.create_risk_analysis_chart_streamlit(operations_risque)
            st.plotly_chart(risk_chart, use_container_width=True)
        except Exception as e:
            st.error(f"Erreur g√©n√©ration graphique risques : {e}")
    
    # Section √©volution r√©cente
    st.markdown("---")
    st.markdown("### üìä √âvolution et Tendances")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        nouvelles = kpi_data.get('nouvelles_operations_semaine', 0)
        st.metric("Nouvelles op√©rations (7j)", nouvelles, delta=None)
    
    with col2:
        cloturees = kpi_data.get('operations_cloturees_semaine', 0)
        st.metric("Op√©rations cl√¥tur√©es (7j)", cloturees, delta=None)
    
    with col3:
        en_retard = kpi_data.get('operations_en_retard', 0)
        st.metric("Op√©rations en retard", en_retard, delta=None)
    
    with col4:
        if 'evolution' in charts:
            st.plotly_chart(charts['evolution'], use_container_width=True)
    
    # Refresh automatique
    if st.button("üîÑ Actualiser les donn√©es"):
        st.cache_data.clear()
        add_notification("Donn√©es actualis√©es avec succ√®s", "success")
        st.rerun()

def render_aco_view():
    """Page Vue Charg√© d'Op√©ration avec fonctionnalit√©s compl√®tes"""
    
    st.markdown("""
    <div class="main-header">
        <h1>üë§ Vue Charg√© d'Op√©ration</h1>
        <p>Interface personnalis√©e pour le suivi de vos op√©rations</p>
    </div>
    """, unsafe_allow_html=True)
    
    db = init_database()
    
    # S√©lection ACO avec gestion dynamique
    col1, col2 = st.columns([3, 1])
    
    with col1:
        try:
            acos_disponibles = [aco['nom_aco'] for aco in db.get_acos_list()]
            if acos_disponibles:
                aco_selectionne = st.selectbox(
                    "Choisir un charg√© d'op√©ration:",
                    options=acos_disponibles,
                    key="aco_selector",
                    index=0 if not st.session_state.selected_aco else acos_disponibles.index(st.session_state.selected_aco) if st.session_state.selected_aco in acos_disponibles else 0
                )
                st.session_state.selected_aco = aco_selectionne
            else:
                st.error("Aucun ACO configur√©")
                return
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration des ACO : {e}")
            return
    
    with col2:
        if st.button("‚öôÔ∏è G√©rer ACO", key="manage_aco_btn"):
            st.session_state.show_aco_management = not st.session_state.get('show_aco_management', False)
    
    # Interface de gestion des ACO
    if st.session_state.get('show_aco_management', False):
        render_aco_management(db, acos_disponibles)
    
    # R√©cup√©ration des op√©rations de l'ACO
    try:
        operations_aco = db.get_operations(responsable=aco_selectionne)
        performance_data = db.get_performance_aco(aco_selectionne)
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es : {e}")
        return
    
    if not operations_aco:
        st.markdown(f"""
        <div class="info-card">
            ‚ÑπÔ∏è Aucune op√©ration trouv√©e pour <strong>{aco_selectionne}</strong>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # R√©sum√© de performance de l'ACO
    st.markdown("### üìä Mon Tableau de Bord")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_card(
            "Mes Op√©rations",
            str(performance_data.get('operations_actives', 0)),
            f"Total: {performance_data.get('total_operations', 0)}",
            "neutral"
        )
    
    with col2:
        avg_progress = performance_data.get('avancement_moyen', 0)
        perf_relative = performance_data.get('performance_relative', 0)
        delta_text = f"{perf_relative:+.1f}% vs moyenne" if perf_relative != 0 else "Dans la moyenne"
        delta_type = "positive" if perf_relative > 0 else "negative" if perf_relative < 0 else "neutral"
        
        display_metric_card(
            "Mon Avancement",
            f"{avg_progress:.1f}%",
            delta_text,
            delta_type
        )
    
    with col3:
        risk_ops = performance_data.get('operations_bloquees', 0)
        display_metric_card(
            "Op√©rations √† Risque",
            str(risk_ops),
            "Action requise" if risk_ops > 0 else "Tout va bien",
            "danger" if risk_ops > 0 else "success"
        )
    
    with col4:
        taux_reussite = performance_data.get('taux_reussite', 0)
        display_metric_card(
            "Taux de R√©ussite",
            f"{taux_reussite:.1f}%",
            f"{performance_data.get('operations_terminees', 0)} termin√©es",
            "success" if taux_reussite > 80 else "warning"
        )
    
    # REM g√©r√©e si disponible
    if performance_data.get('rem_totale_geree', 0) > 0:
        st.markdown("### üí∞ Ma Performance Financi√®re")
        col1, col2 = st.columns(2)
        
        with col1:
            display_metric_card(
                "REM Sous Ma Responsabilit√©",
                utils.format_currency(performance_data['rem_totale_geree']),
                "Rentabilit√© annuelle g√©n√©r√©e",
                "success"
            )
        
        with col2:
            if performance_data.get('budget_total_gere', 0) > 0:
                display_metric_card(
                    "Budget G√©r√©",
                    utils.format_currency(performance_data['budget_total_gere']),
                    "Investissement sous responsabilit√©",
                    "neutral"
                )
    
    # T√¢ches prioritaires de la semaine
    st.markdown("---")
    st.markdown("### üìÖ Mes T√¢ches Prioritaires Cette Semaine")
    
    try:
        taches_semaine = utils.get_weekly_focus_tasks_streamlit(operations_aco, db)
        
        if taches_semaine:
            # Grouper par priorit√©
            taches_bloquees = [t for t in taches_semaine if t.get('priorite') == 'BLOQU√â']
            taches_urgentes = [t for t in taches_semaine if t.get('priorite') == 'URGENT']
            taches_importantes = [t for t in taches_semaine if t.get('priorite') == 'IMPORTANT']
            
            # Afficher les t√¢ches par ordre de priorit√©
            for priorite, taches, color_class in [
                ('BLOQU√â', taches_bloquees, 'alert-card'),
                ('URGENT', taches_urgentes, 'warning-card'),
                ('IMPORTANT', taches_importantes, 'info-card')
            ]:
                if taches:
                    st.markdown(f"#### {priorite} ({len(taches)})")
                    for tache in taches:
                        domaine_info = config.DOMAINES_OPERATIONNELS.get(tache.get('domaine', 'OPERATIONNEL'), {})
                        couleur_domaine = domaine_info.get('couleur', '#6b7280')
                        
                        st.markdown(f"""
                        <div class="{color_class}" style="border-left-color: {couleur_domaine};">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <strong>{tache.get('icone', 'üìå')} {tache.get('operation_nom', 'N/A')}</strong>
                                    <br>
                                    <span style="color: #6b7280;">{tache.get('phase_nom', 'N/A')}</span>
                                    {f"<br><small>Motif: {tache.get('motif_blocage', '')}</small>" if tache.get('motif_blocage') else ""}
                                </div>
                                <div style="text-align: right;">
                                    <span style="font-weight: bold; color: {couleur_domaine};">{priorite}</span>
                                    <br>
                                    <small>{tache.get('jours_restants', 0)} jour(s) restant(s)</small>
                                </div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="success-card">
                üéâ Excellente nouvelle ! Aucune t√¢che urgente cette semaine.
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des t√¢ches : {e}")
    
    # Liste des op√©rations avec vue d√©taill√©e
    st.markdown("---")
    st.markdown("### üìã Mes Op√©rations")
    
    # Filtres pour les op√©rations
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtre_statut = st.selectbox(
            "Filtrer par statut:",
            options=["Tous"] + list(set([op.get('statut_principal', 'N/A') for op in operations_aco])),
            key="filtre_statut_aco"
        )
    
    with col2:
        filtre_type = st.selectbox(
            "Filtrer par type:",
            options=["Tous"] + list(set([op.get('type_operation', 'N/A') for op in operations_aco])),
            key="filtre_type_aco"
        )
    
    with col3:
        ordre_tri = st.selectbox(
            "Trier par:",
            options=["Score de risque", "Avancement", "Date cr√©ation", "REM"],
            key="ordre_tri_aco"
        )
    
    # Appliquer les filtres
    operations_filtrees = operations_aco.copy()
    
    if filtre_statut != "Tous":
        operations_filtrees = [op for op in operations_filtrees if op.get('statut_principal') == filtre_statut]
    
    if filtre_type != "Tous":
        operations_filtrees = [op for op in operations_filtrees if op.get('type_operation') == filtre_type]
    
    # Trier les op√©rations
    if ordre_tri == "Score de risque":
        operations_filtrees.sort(key=lambda x: x.get('score_risque', 0), reverse=True)
    elif ordre_tri == "Avancement":
        operations_filtrees.sort(key=lambda x: x.get('pourcentage_avancement', 0), reverse=True)
    elif ordre_tri == "REM":
        operations_filtrees.sort(key=lambda x: x.get('rem_annuelle_prevue', 0), reverse=True)
    else:  # Date cr√©ation
        operations_filtrees.sort(key=lambda x: x.get('date_creation', ''), reverse=True)
    
    # Afficher les op√©rations
    for operation in operations_filtrees:
        with st.expander(
            f"{operation.get('nom', 'N/A')} - {operation.get('statut_principal', 'N/A')} ({operation.get('pourcentage_avancement', 0):.1f}%)",
            expanded=False
        ):
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                st.write(f"**Type:** {operation.get('type_operation', 'N/A')}")
                st.write(f"**Commune:** {operation.get('commune', 'N/A')}")
                st.write(f"**Logements:** {operation.get('nb_logements_total', 0)}")
                
                # Barre de progression
                avancement = operation.get('pourcentage_avancement', 0)
                color = "success" if avancement > 70 else "warning" if avancement > 30 else "danger"
                display_progress_bar(avancement, "Avancement", color)
                
            with col2:
                # V√©rifier les alertes
                try:
                    alertes = utils.check_alerts(operation['id'], db)
                    if alertes:
                        st.markdown(f"""
                        <div class="alert-card">
                            üö® {len(alertes)} alerte(s) active(s)
                        </div>
                        """, unsafe_allow_html=True)
                        
                        for alerte in alertes[:2]:  # Top 2
                            st.markdown(f"‚Ä¢ {alerte.get('icone', '‚ö†Ô∏è')} {alerte.get('message', 'N/A')}")
                    else:
                        st.markdown("""
                        <div class="success-card">
                            ‚úÖ Aucune alerte active
                        </div>
                        """, unsafe_allow_html=True)
                except Exception as e:
                    st.error(f"Erreur v√©rification alertes : {e}")
                
                # Phase actuelle
                try:
                    phases = db.get_phases_by_operation(operation['id'])
                    phase_actuelle = utils.get_current_phase(phases)
                    if phase_actuelle:
                        st.write(f"**Phase actuelle:** {phase_actuelle.get('sous_phase', 'N/A')}")
                        
                        # Prochaines phases
                        prochaines = utils.get_next_phases(phases, 2)
                        if prochaines:
                            st.write("**Prochaines phases:**")
                            for phase in prochaines:
                                icone = utils.get_phase_icon(phase)
                                st.write(f"‚Ä¢ {icone} {phase.get('sous_phase', 'N/A')}")
                except Exception as e:
                    st.error(f"Erreur phases : {e}")
            
            with col3:
                create_action_buttons(operation['id'], show_detail=True)
                
                # REM si disponible
                if operation.get('rem_annuelle_prevue', 0) > 0:
                    st.markdown(f"""
                    <div class="info-card">
                        üí∞ REM: {utils.format_currency(operation['rem_annuelle_prevue'])}
                    </div>
                    """, unsafe_allow_html=True)
                
                # Score de risque
                score_risque = operation.get('score_risque', 0)
                if score_risque > 50:
                    st.markdown(f"""
                    <div class="warning-card">
                        ‚ö†Ô∏è Risque: {score_risque:.1f}/100
                    </div>
                    """, unsafe_allow_html=True)

def render_aco_management(db, acos_disponibles):
    """Interface de gestion des ACO"""
    
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Gestion des Charg√©s d'Op√©rations")
    
    tab1, tab2, tab3, tab4 = st.tabs(["‚ûï Ajouter", "‚úèÔ∏è Modifier", "üóëÔ∏è Supprimer", "üìä Statistiques"])
    
    with tab1:
        st.markdown("**Ajouter un nouveau ACO**")
        with st.form("add_aco_form"):
            nouveau_aco = st.text_input("Nom du nouvel ACO:", placeholder="Ex: Jean DUPONT")
            submitted = st.form_submit_button("Ajouter")
            
            if submitted:
                if nouveau_aco and nouveau_aco.strip():
                    try:
                        if db.add_aco(nouveau_aco.strip()):
                            add_notification(f"ACO '{nouveau_aco}' ajout√© avec succ√®s", "success")
                            st.rerun()
                        else:
                            add_notification("Erreur lors de l'ajout (nom d√©j√† existant ?)", "error")
                    except Exception as e:
                        add_notification(f"Erreur : {e}", "error")
                else:
                    add_notification("Veuillez saisir un nom valide", "warning")
    
    with tab2:
        st.markdown("**Modifier un ACO existant**")
        with st.form("modify_aco_form"):
            aco_a_modifier = st.selectbox("ACO √† modifier:", options=acos_disponibles)
            nouveau_nom = st.text_input("Nouveau nom:", placeholder="Nouveau nom")
            submitted = st.form_submit_button("Modifier")
            
            if submitted:
                if nouveau_nom and nouveau_nom.strip():
                    try:
                        if db.update_aco(aco_a_modifier, nouveau_nom.strip()):
                            add_notification(f"ACO renomm√© vers '{nouveau_nom}'", "success")
                            st.rerun()
                        else:
                            add_notification("Erreur lors de la modification", "error")
                    except Exception as e:
                        add_notification(f"Erreur : {e}", "error")
                else:
                    add_notification("Veuillez saisir un nouveau nom valide", "warning")
    
    with tab3:
        st.markdown("**Supprimer un ACO**")
        st.warning("‚ö†Ô∏è Attention : Cette action d√©sactivera l'ACO (pas de suppression d√©finitive)")
        
        with st.form("delete_aco_form"):
            aco_a_supprimer = st.selectbox("ACO √† d√©sactiver:", options=acos_disponibles)
            confirmation = st.checkbox("Je confirme vouloir d√©sactiver cet ACO")
            submitted = st.form_submit_button("D√©sactiver", type="primary")
            
            if submitted:
                if confirmation:
                    try:
                        if db.remove_aco(aco_a_supprimer):
                            add_notification(f"ACO '{aco_a_supprimer}' d√©sactiv√©", "success")
                            st.rerun()
                        else:
                            add_notification("Impossible de d√©sactiver (op√©rations en cours ?)", "error")
                    except Exception as e:
                        add_notification(f"Erreur : {e}", "error")
                else:
                    add_notification("Veuillez confirmer l'action", "warning")
    
    with tab4:
        st.markdown("**Statistiques des ACO**")
        try:
            acos_stats = db.get_acos_list(actifs_seulement=False)
            
            if acos_stats:
                df_acos = pd.DataFrame(acos_stats)
                
                # Affichage sous forme de tableau
                st.dataframe(
                    df_acos[['nom_aco', 'actif', 'operations_actuelles', 'avancement_moyen', 'rem_totale_geree']],
                    column_config={
                        "nom_aco": "Nom ACO",
                        "actif": "Actif",
                        "operations_actuelles": "Ops. Actuelles",
                        "avancement_moyen": st.column_config.ProgressColumn(
                            "Avancement Moyen",
                            format="%.1f%%",
                            min_value=0,
                            max_value=100
                        ),
                        "rem_totale_geree": st.column_config.NumberColumn(
                            "REM G√©r√©e (‚Ç¨)",
                            format="%.0f ‚Ç¨"
                        )
                    },
                    use_container_width=True
                )
            else:
                st.info("Aucune statistique ACO disponible")
                
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration statistiques : {e}")

def render_operation_detail():
    """Page de d√©tail d'une op√©ration avec onglets √©pur√©s"""
    
    operation_id = st.session_state.get('operation_detail_id')
    if not operation_id:
        st.error("Aucune op√©ration s√©lectionn√©e")
        return
    
    db = init_database()
    
    try:
        operation = db.get_operation_detail(operation_id)
        if not operation:
            st.error("Op√©ration introuvable")
            return
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration de l'op√©ration : {e}")
        return
    
    # En-t√™te avec bouton retour
    col1, col2 = st.columns([6, 1])
    
    with col1:
        st.markdown(f"""
        <div class="main-header">
            <h1>üèóÔ∏è {operation.get("nom", "N/A")}</h1>
            <p>{operation.get("type_operation", "N/A")} - {operation.get("commune", "N/A")}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        if st.button("‚Üê Retour", key="back_btn"):
            st.session_state.current_page = "aco_view"
            st.rerun()
    
    # Informations g√©n√©rales en cartes
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_card("Type", operation.get('type_operation', 'N/A'))
    
    with col2:
        display_status_badge(operation.get('statut_principal', 'N/A'))
    
    with col3:
        avancement = operation.get('pourcentage_avancement', 0)
        color = "success" if avancement > 70 else "warning" if avancement > 30 else "danger"
        display_metric_card("Avancement", f"{avancement:.1f}%")
    
    with col4:
        score_risque = operation.get('score_risque', 0)
        display_metric_card("Score Risque", f"{score_risque:.1f}/100")
    
    # Informations suppl√©mentaires si disponibles
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if operation.get('rem_annuelle_prevue', 0) > 0:
            display_metric_card("REM Annuelle", utils.format_currency(operation['rem_annuelle_prevue']))
    
    with col2:
        if operation.get('budget_total', 0) > 0:
            display_metric_card("Budget Total", utils.format_currency(operation['budget_total']))
    
    with col3:
        if operation.get('nb_logements_total', 0) > 0:
            display_metric_card("Logements", str(operation['nb_logements_total']))
    
    # Onglets √©pur√©s (SANS Finance et Pi√®ces jointes)
    tab1, tab2, tab3 = st.tabs(["üìã Phases", "üìù Journal de Suivi", "üìä Timeline"])
    
    with tab1:
        render_phases_tab(operation_id, db)
    
    with tab2:
        render_journal_tab(operation_id, db)
    
    with tab3:
        render_timeline_tab(operation_id, db)

def render_phases_tab(operation_id: int, db):
    """Onglet gestion des phases avec validation automatique"""
    
    st.markdown("### üìã Gestion des Phases")
    
    try:
        phases = db.get_phases_by_operation(operation_id)
        if not phases:
            st.warning("Aucune phase trouv√©e pour cette op√©ration")
            return
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des phases : {e}")
        return
    
    # Statistiques rapides
    total_phases = len(phases)
    phases_validees = sum(1 for p in phases if p.get('est_validee', False))
    phases_bloquees = sum(1 for p in phases if p.get('blocage_actif', False))
    phases_retard = len(utils.detect_delays(phases))
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        display_metric_card("Total Phases", str(total_phases))
    with col2:
        display_metric_card("Valid√©es", str(phases_validees))
    with col3:
        display_metric_card("Bloqu√©es", str(phases_bloquees))
    with col4:
        display_metric_card("En Retard", str(phases_retard))
    
    # Option d'ajout de phase custom
    with st.expander("‚ûï Ajouter une Phase Personnalis√©e"):
        with st.form("add_custom_phase"):
            col1, col2 = st.columns(2)
            
            with col1:
                nom_phase = st.text_input("Nom de la phase:", placeholder="Ex: Validation technique sp√©ciale")
                phase_principale = st.text_input("Groupe principal:", placeholder="Ex: √âTUDES COMPL√âMENTAIRES")
                ordre_insertion = st.number_input("Ins√©rer √† l'ordre:", min_value=1, max_value=total_phases+1, value=total_phases+1)
            
            with col2:
                duree_mini = st.number_input("Dur√©e minimale (jours):", min_value=1, value=7)
                duree_maxi = st.number_input("Dur√©e maximale (jours):", min_value=1, value=30)
                domaine = st.selectbox("Domaine:", options=list(config.DOMAINES_OPERATIONNELS.keys()))
                responsable = st.text_input("Responsable:", placeholder="Nom du responsable")
            
            if st.form_submit_button("Ajouter la Phase"):
                if nom_phase and phase_principale:
                    try:
                        if db.add_custom_phase(operation_id, nom_phase, phase_principale, 
                                             ordre_insertion, duree_mini, duree_maxi, 
                                             responsable, domaine):
                            add_notification("Phase personnalis√©e ajout√©e avec succ√®s", "success")
                            st.rerun()
                        else:
                            add_notification("Erreur lors de l'ajout de la phase", "error")
                    except Exception as e:
                        add_notification(f"Erreur : {e}", "error")
                else:
                    add_notification("Veuillez remplir les champs obligatoires", "warning")
    
    st.markdown("---")
    
    # Affichage des phases par domaine avec couleurs
    phases_par_domaine = {}
    for phase in phases:
        domaine = phase.get('domaine', 'OPERATIONNEL')
        if domaine not in phases_par_domaine:
            phases_par_domaine[domaine] = []
        phases_par_domaine[domaine].append(phase)
    
    # Variable pour tracker les modifications
    phases_modifiees = []
    
    for domaine, phases_domaine in phases_par_domaine.items():
        domaine_info = config.DOMAINES_OPERATIONNELS.get(domaine, {})
        icone_domaine = domaine_info.get('icone', 'üìå')
        nom_domaine = domaine_info.get('nom', domaine)
        couleur_domaine = domaine_info.get('couleur', '#6b7280')
        
        st.markdown(f"#### {icone_domaine} {nom_domaine}")
        
        for phase in sorted(phases_domaine, key=lambda x: x.get('ordre_phase', 0)):
            with st.container():
                # Utiliser la fonction de cr√©ation de carte
                card_html = utils.create_phase_summary_card(phase, show_details=True)
                st.markdown(card_html, unsafe_allow_html=True)
                
                col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
                
                with col1:
                    # Checkbox pour validation
                    key_validation = f"phase_validee_{phase['id']}"
                    est_validee = st.checkbox(
                        "Valid√©e",
                        value=phase.get('est_validee', False),
                        key=key_validation
                    )
                    
                    if est_validee != phase.get('est_validee', False):
                        phases_modifiees.append({
                            'id': phase['id'],
                            'est_validee': est_validee
                        })
                
                with col2:
                    # Gestion des dur√©es modifiables
                    if st.checkbox("Modifier dur√©es", key=f"modify_duration_{phase['id']}"):
                        duree_mini = st.number_input(
                            "Dur√©e mini (j):",
                            min_value=1,
                            value=phase.get('duree_mini_jours', 7),
                            key=f"duree_mini_{phase['id']}"
                        )
                        duree_maxi = st.number_input(
                            "Dur√©e maxi (j):",
                            min_value=1,
                            value=phase.get('duree_maxi_jours', 30),
                            key=f"duree_maxi_{phase['id']}"
                        )
                        
                        if st.button("üíæ Sauver dur√©es", key=f"save_duration_{phase['id']}"):
                            if duree_mini <= duree_maxi:
                                try:
                                    if db.update_phase(phase['id'], duree_mini_jours=duree_mini, duree_maxi_jours=duree_maxi):
                                        add_notification("Dur√©es mises √† jour", "success")
                                        st.rerun()
                                    else:
                                        add_notification("Erreur mise √† jour dur√©es", "error")
                                except Exception as e:
                                    add_notification(f"Erreur : {e}", "error")
                            else:
                                add_notification("Dur√©e mini doit √™tre ‚â§ dur√©e maxi", "warning")
                
                with col3:
                    # Gestion des dates
                    if st.checkbox("Modifier dates", key=f"modify_dates_{phase['id']}"):
                        date_fin_prevue = st.date_input(
                            "Date fin pr√©vue:",
                            value=datetime.strptime(phase['date_fin_prevue'], '%Y-%m-%d').date() if phase.get('date_fin_prevue') else None,
                            key=f"date_fin_{phase['id']}"
                        )
                        
                        if st.button("üíæ Sauver date", key=f"save_date_{phase['id']}"):
                            try:
                                if db.update_phase(phase['id'], date_fin_prevue=date_fin_prevue.isoformat()):
                                    add_notification("Date mise √† jour", "success")
                                    st.rerun()
                                else:
                                    add_notification("Erreur mise √† jour date", "error")
                            except Exception as e:
                                add_notification(f"Erreur : {e}", "error")
                
                with col4:
                    # Gestion des blocages
                    if phase.get('blocage_actif', False):
                        if st.button(f"üîì D√©bloquer", key=f"unblock_{phase['id']}"):
                            try:
                                if db.update_phase(phase['id'], blocage_actif=False):
                                    add_notification("Phase d√©bloqu√©e avec succ√®s", "success")
                                    st.rerun()
                                else:
                                    add_notification("Erreur d√©blocage", "error")
                            except Exception as e:
                                add_notification(f"Erreur : {e}", "error")
                    else:
                        if st.button(f"üîí Bloquer", key=f"block_{phase['id']}"): 
                            motif = st.text_input(f"Motif du blocage:", key=f"motif_{phase['id']}")
                            if motif:
                                try:
                                    if db.update_phase(phase['id'], blocage_actif=True, motif_blocage=motif):
                                        add_notification("Phase bloqu√©e avec succ√®s", "success")
                                        st.rerun()
                                    else:
                                        add_notification("Erreur blocage", "error")
                                except Exception as e:
                                    add_notification(f"Erreur : {e}", "error")
                
                st.markdown("---")
    
    # Bouton de sauvegarde global pour les validations
    if phases_modifiees:
        if st.button("üíæ Sauvegarder les Validations", key="save_all_phases", type="primary"):
            try:
                success_count = 0
                for phase_modif in phases_modifiees:
                    if db.update_phase(phase_modif['id'], est_validee=phase_modif['est_validee']):
                        success_count += 1
                
                # Mise √† jour automatique du statut et de l'avancement
                if db.update_operation_progress_and_status(operation_id):
                    add_notification(f"{success_count} phase(s) mise(s) √† jour. Statut recalcul√© automatiquement.", "success")
                    st.rerun()
                else:
                    add_notification("Erreur lors de la mise √† jour du statut", "error")
                    
            except Exception as e:
                add_notification(f"Erreur: {str(e)}", "error")

def render_journal_tab(operation_id: int, db):
    """Onglet journal avec gestion des blocages et alertes - SOURCE UNIQUE DES NOTES"""
    
    st.markdown("### üìù Journal de Suivi")
    st.markdown("*Source unique pour toutes les notes, commentaires et signalement de blocages*")
    
    # Interface d'ajout d'entr√©e
    st.markdown("#### ‚ûï Nouvelle Entr√©e")
    
    with st.form("add_journal_entry"):
        col1, col2 = st.columns([3, 1])
        
        with col1:
            type_action = st.selectbox(
                "Type d'action:",
                options=["INFO", "ATTENTION", "BLOCAGE", "VALIDATION", "OBSERVATION"],
                help="INFO: Information g√©n√©rale | ATTENTION: Point d'attention | BLOCAGE: Blocage critique | VALIDATION: Validation obtenue"
            )
            
            contenu = st.text_area(
                "Contenu de l'entr√©e:",
                placeholder="D√©crivez la situation, les actions men√©es, les probl√®mes rencontr√©s...",
                height=100
            )
            
            phase_concernee = st.text_input(
                "Phase concern√©e (optionnel):",
                placeholder="Ex: Travaux fondations"
            )
        
        with col2:
            auteur = st.text_input(
                "Auteur:",
                value=st.session_state.get('selected_aco', 'Utilisateur'),
                help="Nom de la personne qui saisit l'entr√©e"
            )
            
            niveau_urgence = st.selectbox(
                "Niveau d'urgence:",
                options=[1, 2, 3, 4, 5],
                index=0,
                format_func=lambda x: {
                    1: "1 - Faible",
                    2: "2 - Normal", 
                    3: "3 - Moyen",
                    4: "4 - √âlev√©",
                    5: "5 - Critique"
                }[x]
            )
            
            est_blocage = st.checkbox(
                "üî¥ Signaler comme blocage",
                help="Cochez si cette entr√©e signale un blocage critique"
            )
        
        submitted = st.form_submit_button("üìù Ajouter l'entr√©e", type="primary")
        
        if submitted:
            if contenu.strip():
                try:
                    if db.add_journal_entry(
                        operation_id=operation_id,
                        auteur=auteur,
                        type_action=type_action,
                        contenu=contenu.strip(),
                        phase_concernee=phase_concernee if phase_concernee.strip() else None,
                        est_blocage=est_blocage or type_action == "BLOCAGE",
                        niveau_urgence=niveau_urgence
                    ):
                        add_notification("Entr√©e journal ajout√©e avec succ√®s", "success")
                        
                        # Si c'est un blocage, informer de la g√©n√©ration automatique d'alerte
                        if est_blocage or type_action == "BLOCAGE":
                            add_notification("Alerte automatique g√©n√©r√©e pour ce blocage", "warning")
                        
                        st.rerun()
                    else:
                        add_notification("Erreur lors de l'ajout de l'entr√©e", "error")
                except Exception as e:
                    add_notification(f"Erreur : {e}", "error")
            else:
                add_notification("Veuillez saisir un contenu", "warning")
    
    st.markdown("---")
    
    # Filtres pour le journal
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtre_type = st.selectbox(
            "Filtrer par type:",
            options=["Tous", "BLOCAGE", "ATTENTION", "VALIDATION", "INFO", "OBSERVATION"],
            key="filtre_type_journal"
        )
    
    with col2:
        inclure_resolus = st.checkbox(
            "Inclure blocages r√©solus",
            value=True,
            key="inclure_resolus"
        )
    
    with col3:
        limite_entries = st.selectbox(
            "Nombre d'entr√©es:",
            options=[10, 25, 50, 100],
            index=1,
            key="limite_journal"
        )
    
    # R√©cup√©ration des entr√©es journal
    try:
        journal_entries = db.get_journal_by_operation(
            operation_id, 
            include_resolved=inclure_resolus,
            limit=limite_entries
        )
        
        # Appliquer le filtre type
        if filtre_type != "Tous":
            journal_entries = [entry for entry in journal_entries if entry.get('type_action') == filtre_type]
        
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du journal : {e}")
        return
    
    # Affichage des entr√©es
    if journal_entries:
        st.markdown(f"#### üìö Historique ({len(journal_entries)} entr√©es)")
        
        for entry in journal_entries:
            # Couleur selon le type et l'√©tat
            if entry.get('est_blocage', False):
                if entry.get('est_resolu', False):
                    card_class = "success-card"
                    icone = "‚úÖ"
                    type_display = "BLOCAGE R√âSOLU"
                else:
                    card_class = "alert-card"
                    icone = "üî¥"
                    type_display = "BLOCAGE ACTIF"
            elif entry.get('type_action') == 'ATTENTION':
                card_class = "warning-card"
                icone = "‚ö†Ô∏è"
                type_display = "ATTENTION"
            elif entry.get('type_action') == 'VALIDATION':
                card_class = "success-card"
                icone = "‚úÖ"
                type_display = "VALIDATION"
            else:
                card_class = "info-card"
                icone = "‚ÑπÔ∏è"
                type_display = entry.get('type_action', 'INFO')
            
            # Date format√©e
            date_saisie = entry.get('date_saisie', '')
            if date_saisie:
                try:
                    date_obj = datetime.strptime(date_saisie, '%Y-%m-%d %H:%M:%S')
                    date_fr = date_obj.strftime('%d/%m/%Y √† %H:%M')
                except:
                    date_fr = date_saisie
            else:
                date_fr = "Date inconnue"
            
            st.markdown(f"""
            <div class="{card_class}">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 18px;">{icone}</span>
                        <strong>{type_display}</strong>
                        {f"<span style='color: #6b7280; margin-left: 10px;'>Phase: {entry.get('phase_concernee', '')}</span>" if entry.get('phase_concernee') else ""}
                    </div>
                    <div style="text-align: right; color: #6b7280; font-size: 0.8rem;">
                        <div>{entry.get('auteur', 'N/A')}</div>
                        <div>{date_fr}</div>
                    </div>
                </div>
                
                <div style="margin: 10px 0; line-height: 1.4;">
                    {entry.get('contenu', 'N/A')}
                </div>
                
                {f"<div style='margin-top: 10px; padding: 8px; background: rgba(255,255,255,0.5); border-radius: 6px; font-size: 0.9rem;'><strong>R√©solution:</strong> {entry.get('commentaire_resolution', '')} <em>par {entry.get('resolu_par', '')}</em></div>" if entry.get('est_resolu') and entry.get('commentaire_resolution') else ""}
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 10px;">
                    <div style="color: #6b7280; font-size: 0.8rem;">
                        Urgence: {"üî•" * entry.get('niveau_urgence', 1)} ({entry.get('niveau_urgence', 1)}/5)
                    </div>
                    <div>
                        {f'<button style="background: #10b981; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 0.8rem;">R√©soudre</button>' if entry.get('est_blocage') and not entry.get('est_resolu') else ''}
                    </div>
                </div>
            </div>
            <br>
            """, unsafe_allow_html=True)
            
            # Bouton de r√©solution pour les blocages actifs
            if entry.get('est_blocage', False) and not entry.get('est_resolu', False):
                col1, col2 = st.columns([1, 4])
                with col1:
                    if st.button(f"‚úÖ R√©soudre", key=f"resolve_{entry['id']}"):
                        st.session_state[f"resolving_{entry['id']}"] = True
                
                # Interface de r√©solution
                if st.session_state.get(f"resolving_{entry['id']}", False):
                    with st.form(f"resolve_form_{entry['id']}"):
                        commentaire_resolution = st.text_area(
                            "Commentaire de r√©solution:",
                            placeholder="Expliquez comment le blocage a √©t√© r√©solu...",
                            key=f"comment_resolve_{entry['id']}"
                        )
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.form_submit_button("‚úÖ Confirmer r√©solution"):
                                if commentaire_resolution.strip():
                                    try:
                                        if db.resolve_blocage(
                                            entry['id'], 
                                            st.session_state.get('selected_aco', 'Utilisateur'),
                                            commentaire_resolution.strip()
                                        ):
                                            add_notification("Blocage r√©solu avec succ√®s", "success")
                                            st.session_state[f"resolving_{entry['id']}"] = False
                                            st.rerun()
                                        else:
                                            add_notification("Erreur lors de la r√©solution", "error")
                                    except Exception as e:
                                        add_notification(f"Erreur : {e}", "error")
                                else:
                                    add_notification("Veuillez saisir un commentaire", "warning")
                        
                        with col2:
                            if st.form_submit_button("‚ùå Annuler"):
                                st.session_state[f"resolving_{entry['id']}"] = False
                                st.rerun()
                
                st.markdown("---")
    else:
        st.markdown("""
        <div class="info-card">
            üìù Aucune entr√©e de journal pour cette op√©ration. Commencez par ajouter une entr√©e ci-dessus.
        </div>
        """, unsafe_allow_html=True)

def render_timeline_tab(operation_id: int, db):
    """Onglet timeline avec visualisations enrichies"""
    
    st.markdown("### üìä Timeline Interactive")
    
    # S√©lection du type de visualisation
    col1, col2 = st.columns([3, 1])
    
    with col1:
        type_timeline = st.radio(
            "Type de visualisation:",
            options=["chronologique", "mental_map"],
            format_func=lambda x: {
                "chronologique": "üìÖ Timeline Chronologique (Phases + Journal + Alertes)",
                "mental_map": "üß† Carte Mentale par Domaines"
            }[x],
            key="timeline_type",
            horizontal=True
        )
    
    with col2:
        if st.button("üîÑ Actualiser Timeline"):
            st.cache_data.clear()
            add_notification("Timeline actualis√©e", "success")
            st.rerun()
    
    # R√©cup√©ration des donn√©es pour la timeline
    try:
        timeline_data = db.get_timeline_data(operation_id)
        if not timeline_data or not timeline_data.get('phases'):
            st.warning("Aucune donn√©e disponible pour la timeline")
            return
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es timeline : {e}")
        return
    
    # Statistiques rapides de la timeline
    nb_phases = len(timeline_data.get('phases', []))
    nb_journal = len(timeline_data.get('journal_entries', []))
    nb_alertes = len(timeline_data.get('alertes', []))
    
    col1, col2, col3 = st.columns(3)
    with col1:
        display_metric_card("Phases", str(nb_phases))
    with col2:
        display_metric_card("Entr√©es Journal", str(nb_journal))
    with col3:
        display_metric_card("Alertes Actives", str(nb_alertes))
    
    # G√©n√©ration et affichage de la timeline
    try:
        with st.spinner("G√©n√©ration de la timeline..."):
            timeline_html = utils.generate_timeline(operation_id, timeline_data, type_timeline)
        
        if timeline_html:
            st.markdown("""
            <div class="timeline-container">
            """, unsafe_allow_html=True)
            
            if type_timeline == "chronologique":
                # Pour la timeline chronologique, utiliser st.plotly_chart si c'est du HTML plotly
                if "plotly" in timeline_html.lower():
                    st.components.v1.html(timeline_html, height=600, scrolling=True)
                else:
                    st.markdown(timeline_html, unsafe_allow_html=True)
            else:
                # Pour la carte mentale, affichage direct HTML
                st.markdown(timeline_html, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.error("Impossible de g√©n√©rer la timeline")
            
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de la timeline : {e}")
    
    # L√©gende et informations
    st.markdown("---")
    
    if type_timeline == "chronologique":
        st.markdown("""
        #### üìñ L√©gende Timeline Chronologique
        
        **Couleurs des phases :**
        - üü¢ **Vert** : Phase valid√©e
        - üü° **Jaune** : Phase en cours
        - üî¥ **Rouge** : Phase en retard ou bloqu√©e
        - üü† **Orange** : √âch√©ance proche (‚â§ 7 jours)
        
        **√âl√©ments timeline :**
        - üìå **Phases** : Barres horizontales avec dur√©e
        - üìù **Journal** : √âv√©nements importants
        - üö® **Alertes** : Notifications actives
        - üìÖ **Ligne rouge** : Date actuelle
        """)
    else:
        st.markdown("""
        #### üß† Carte Mentale par Domaines
        
        **Domaines organis√©s :**
        - üèóÔ∏è **Op√©rationnel** : Phases techniques et op√©rationnelles
        - ‚öñÔ∏è **Juridique** : Autorisations, march√©s, contrats
        - üí∞ **Budg√©taire** : Financement, REM, budget
        
        **√âtats des phases :**
        - ‚úÖ Valid√©e | ‚è≥ En cours | ‚è∞ En retard | üî¥ Bloqu√©e
        - üí∞ Ic√¥ne REM = Impact sur la rentabilit√©
        """)
    
    # Exportation des donn√©es timeline
    with st.expander("üìä Donn√©es D√©taill√©es & Export"):
        
        if timeline_data.get('phases'):
            st.markdown("**Phases de l'op√©ration :**")
            phases_df = pd.DataFrame(timeline_data['phases'])
            
            # Colonnes √† afficher
            colonnes_phases = ['sous_phase', 'phase_principale', 'ordre_phase', 'est_validee', 
                             'domaine', 'responsable_principal', 'date_fin_prevue']
            colonnes_disponibles = [col for col in colonnes_phases if col in phases_df.columns]
            
            if colonnes_disponibles:
                st.dataframe(
                    phases_df[colonnes_disponibles],
                    column_config={
                        "sous_phase": "Phase",
                        "phase_principale": "Groupe",
                        "ordre_phase": "Ordre",
                        "est_validee": "Valid√©e",
                        "domaine": "Domaine",
                        "responsable_principal": "Responsable",
                        "date_fin_prevue": "√âch√©ance"
                    },
                    use_container_width=True
                )
        
        # Export Excel si demand√©
        if st.button("üì§ Exporter Timeline Excel"):
            try:
                with st.spinner("G√©n√©ration du fichier Excel..."):
                    excel_data = utils.export_to_excel_streamlit(
                        [db.get_operation_detail(operation_id)],
                        {operation_id: timeline_data.get('phases', [])}
                    )
                
                if excel_data:
                    st.download_button(
                        label="üì• T√©l√©charger le fichier Excel",
                        data=excel_data,
                        file_name=f"timeline_operation_{operation_id}_{datetime.now().strftime('%Y%m%d')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    add_notification("Fichier Excel g√©n√©r√© avec succ√®s", "success")
                else:
                    add_notification("Erreur lors de la g√©n√©ration Excel", "error")
            except Exception as e:
                add_notification(f"Erreur export : {e}", "error")

def render_creation_operation():
    """Page de cr√©ation d'op√©ration avec formulaire dynamique par type"""
    
    st.markdown("""
    <div class="main-header">
        <h1>‚ûï Cr√©er une Nouvelle Op√©ration</h1>
        <p>Formulaire adaptatif selon le type d'op√©ration s√©lectionn√©</p>
    </div>
    """, unsafe_allow_html=True)
    
    db = init_database()
    
    # √âtape 1 : S√©lection du type d'op√©ration
    st.markdown("### 1Ô∏è‚É£ Type d'Op√©ration")
    
    type_operation = st.radio(
        "Choisissez le type d'op√©ration :",
        options=config.TYPES_OPERATIONS,
        format_func=lambda x: {
            "OPP": "üèóÔ∏è Op√©ration Propre (OPP) - Construction en ma√Ætrise d'ouvrage directe",
            "VEFA": "üè¢ Vente √âtat Futur Ach√®vement (VEFA) - Acquisition chez promoteur",
            "AMO": "ü§ù Assistance Ma√Ætrise Ouvrage (AMO) - Mission de conseil",
            "MANDAT": "üìú Op√©ration en Mandat - Mandat de ma√Ætrise d'ouvrage"
        }[x],
        key="type_operation_creation"
    )
    
    st.markdown("---")
    
    # Formulaire adaptatif selon le type
    with st.form("creation_operation_form"):
        
        # √âtape 2 : Champs communs
        st.markdown("### 2Ô∏è‚É£ Informations G√©n√©rales")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nom_operation = st.text_input(
                "Nom de l'op√©ration *",
                placeholder="Ex: 44 COUR CHARNEAU",
                help="Nom unique identifiant l'op√©ration"
            )
            
            # R√©cup√©ration des ACO disponibles
            try:
                acos_disponibles = [aco['nom_aco'] for aco in db.get_acos_list()]
                if not acos_disponibles:
                    st.error("Aucun ACO configur√©. Veuillez d'abord ajouter des ACO.")
                    return
                
                responsable_aco = st.selectbox(
                    "Responsable ACO *",
                    options=acos_disponibles,
                    help="Charg√© d'op√©ration responsable"
                )
            except Exception as e:
                st.error(f"Erreur r√©cup√©ration ACO : {e}")
                return
            
            commune = st.text_input(
                "Commune",
                placeholder="Ex: LES ABYMES"
            )
        
        with col2:
            nb_logements_total = st.number_input(
                "Nombre total de logements",
                min_value=0,
                value=0,
                help="Nombre total de logements pr√©vus"
            )
            
            phase_actuelle_ordre = st.number_input(
                "Phase actuelle (ordre) *",
                min_value=1,
                value=1,
                help="Ordre de la phase o√π se trouve actuellement l'op√©ration (pour calcul statut automatique)"
            )
            
            date_livraison_cible = st.date_input(
                "Date livraison cible",
                value=None,
                help="Date de livraison pr√©vue (optionnel)"
            )
        
        st.markdown("---")
        
        # √âtape 3 : Champs sp√©cifiques selon le type
        st.markdown("### 3Ô∏è‚É£ Informations Sp√©cifiques")
        
        if type_operation == "OPP":
            render_opp_specific_fields()
        elif type_operation == "VEFA":
            render_vefa_specific_fields()
        elif type_operation == "AMO":
            render_amo_specific_fields()
        elif type_operation == "MANDAT":
            render_mandat_specific_fields()
        
        st.markdown("---")
        
        # Bouton de soumission
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submitted = st.form_submit_button(
                "üöÄ Cr√©er l'Op√©ration",
                type="primary",
                use_container_width=True
            )
        
        if submitted:
            # Validation des champs obligatoires
            if not nom_operation or not nom_operation.strip():
                st.error("Le nom de l'op√©ration est obligatoire")
                return
            
            if not responsable_aco:
                st.error("Le responsable ACO est obligatoire")
                return
            
            # R√©cup√©ration des donn√©es du formulaire selon le type
            operation_data = {
                'nom': nom_operation.strip(),
                'type_operation': type_operation,
                'responsable_aco': responsable_aco,
                'commune': commune.strip() if commune else "",
                'nb_logements_total': nb_logements_total,
                'phase_actuelle_ordre': phase_actuelle_ordre,
                'date_livraison_cible': date_livraison_cible.isoformat() if date_livraison_cible else None
            }
            
            # Ajouter les champs sp√©cifiques depuis session_state
            operation_data.update(get_specific_fields_data(type_operation))
            
            # Cr√©ation de l'op√©ration
            try:
                with st.spinner("Cr√©ation de l'op√©ration en cours..."):
                    operation_id = db.create_operation(**operation_data)
                
                if operation_id:
                    add_notification(f"Op√©ration '{nom_operation}' cr√©√©e avec succ√®s (ID: {operation_id})", "success")
                    
                    # Redirection vers la vue d√©tail
                    st.session_state.operation_detail_id = operation_id
                    st.session_state.current_page = "detail_operation"
                    
                    # Petit d√©lai pour voir la notification
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Erreur lors de la cr√©ation de l'op√©ration")
                    
            except Exception as e:
                st.error(f"Erreur cr√©ation : {e}")

def render_opp_specific_fields():
    """Champs sp√©cifiques pour les op√©rations OPP"""
    
    st.markdown("#### üèóÔ∏è Sp√©cifique Op√©ration Propre (OPP)")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üè† Programme**")
        
        nb_lls = st.number_input("Nb logements LLS", min_value=0, value=0, key="opp_nb_lls")
        nb_llts = st.number_input("Nb logements LLTS", min_value=0, value=0, key="opp_nb_llts")
        nb_pls = st.number_input("Nb logements PLS", min_value=0, value=0, key="opp_nb_pls")
        
        # Calcul automatique du total
        total_calcule = nb_lls + nb_llts + nb_pls
        if total_calcule > 0:
            st.info(f"Total calcul√© : {total_calcule} logements")
        
        st.markdown("**üìç Foncier**")
        adresse_terrain = st.text_input("Adresse du terrain", key="opp_adresse")
        surface_terrain = st.number_input("Surface terrain (m¬≤)", min_value=0.0, value=0.0, key="opp_surface")
    
    with col2:
        st.markdown("**üí∞ Budget**")
        
        budget_total = st.number_input(
            "Budget total estim√© (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="opp_budget_total",
            help="Budget total pr√©visionnel de l'op√©ration"
        )
        
        cout_foncier = st.number_input(
            "Co√ªt foncier (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="opp_cout_foncier"
        )
        
        cout_travaux = st.number_input(
            "Co√ªt travaux estim√© (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="opp_cout_travaux"
        )
        
        st.markdown("**üìÖ Planning Initial**")
        date_debut_etudes = st.date_input(
            "Date d√©but √©tudes",
            value=None,
            key="opp_date_debut_etudes"
        )
        
        # Affichage projection REM si budget disponible
        if budget_total > 0 and (nb_lls + nb_llts + nb_pls) > 0:
            st.markdown("**üí° Projection REM**")
            try:
                rem_projection = config.calculate_rem_projection({
                    'nb_lls': nb_lls,
                    'nb_llts': nb_llts,
                    'nb_pls': nb_pls,
                    'budget_total': budget_total
                })
                
                if 'erreur' not in rem_projection:
                    st.success(f"REM annuelle estim√©e : {utils.format_currency(rem_projection.get('rem_annuelle', 0))}")
                    
                    # D√©tail par type
                    repartition = rem_projection.get('repartition', {})
                    if any(repartition.values()):
                        st.markdown("**R√©partition :**")
                        for type_log, montant in repartition.items():
                            if montant > 0:
                                st.write(f"‚Ä¢ {type_log}: {utils.format_currency(montant)}")
                else:
                    st.warning("Impossible de calculer la projection REM")
            except Exception as e:
                st.warning(f"Erreur calcul REM : {e}")

def render_vefa_specific_fields():
    """Champs sp√©cifiques pour les op√©rations VEFA"""
    
    st.markdown("#### üè¢ Sp√©cifique VEFA")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üëî Promoteur**")
        
        promoteur = st.selectbox(
            "Nom promoteur *",
            options=[""] + config.INTERVENANTS_BASE.get('Promoteurs', []),
            key="vefa_promoteur",
            help="S√©lectionnez le promoteur partenaire"
        )
        
        if promoteur == "":
            promoteur_autre = st.text_input(
                "Autre promoteur:",
                placeholder="Nom du promoteur",
                key="vefa_promoteur_autre"
            )
            if promoteur_autre:
                promoteur = promoteur_autre
        
        nom_programme = st.text_input(
            "Nom du programme",
            placeholder="Ex: R√©sidence du Parc",
            key="vefa_programme"
        )
        
        nb_logements_reserves = st.number_input(
            "Nb logements r√©serv√©s *",
            min_value=0,
            value=0,
            key="vefa_nb_reserves",
            help="Nombre de logements r√©serv√©s chez le promoteur"
        )
    
    with col2:
        st.markdown("**üí∞ Conditions VEFA**")
        
        prix_reservation = st.number_input(
            "Prix de r√©servation (‚Ç¨) *",
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="vefa_prix",
            help="Prix total de la r√©servation VEFA"
        )
        
        st.markdown("**üìÖ Planning Promoteur**")
        
        date_signature_vefa = st.date_input(
            "Date signature VEFA pr√©vue",
            value=None,
            key="vefa_date_signature"
        )
        
        date_pc_promoteur = st.date_input(
            "Date PC promoteur",
            value=None,
            key="vefa_date_pc"
        )
        
         # Estimation co√ªt par logement
        if prix_reservation > 0 and nb_logements_reserves > 0:
            cout_par_logement = prix_reservation / nb_logements_reserves
            st.info(f"Co√ªt par logement : {utils.format_currency(cout_par_logement)}")
        
        # Projection REM VEFA
        if prix_reservation > 0 and nb_logements_reserves > 0:
            st.markdown("**üí° Projection REM VEFA**")
            try:
                # Pour VEFA, estimation bas√©e sur le prix et supposer une r√©partition type
                nb_lls_estime = int(nb_logements_reserves * 0.6)  # 60% LLS par d√©faut
                nb_llts_estime = int(nb_logements_reserves * 0.3)  # 30% LLTS
                nb_pls_estime = nb_logements_reserves - nb_lls_estime - nb_llts_estime
                
                rem_projection = config.calculate_rem_projection({
                    'nb_lls': nb_lls_estime,
                    'nb_llts': nb_llts_estime,
                    'nb_pls': nb_pls_estime,
                    'budget_total': prix_reservation
                })
                
                if 'erreur' not in rem_projection:
                    st.success(f"REM annuelle estim√©e : {utils.format_currency(rem_projection.get('rem_annuelle', 0))}")
                    st.caption("*Estimation bas√©e sur une r√©partition type : 60% LLS, 30% LLTS, 10% PLS*")
                else:
                    st.warning("Impossible de calculer la projection REM")
            except Exception as e:
                st.warning(f"Erreur calcul REM : {e}")

def render_amo_specific_fields():
    """Champs sp√©cifiques pour les missions AMO"""
    
    st.markdown("#### ü§ù Sp√©cifique Mission AMO")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë§ Ma√Ætre d'Ouvrage Client**")
        
        moa_cliente = st.text_input(
            "Nom MOA cliente *",
            placeholder="Ex: SEM GUADELOUPE AMENAGEMENT",
            key="amo_moa",
            help="Organisme pour lequel nous intervenons en AMO"
        )
        
        contact_principal = st.text_input(
            "Contact principal",
            placeholder="Nom et fonction du contact",
            key="amo_contact"
        )
        
        type_organisme = st.selectbox(
            "Type d'organisme",
            options=["", "SEM", "SPL", "Collectivit√©", "Bailleur social", "Priv√©", "Autre"],
            key="amo_type_organisme"
        )
        
        st.markdown("**üéØ Mission**")
        
        perimetre_mission = st.multiselect(
            "P√©rim√®tre mission *",
            options=[
                "Assistance programmation",
                "Assistance choix MOE", 
                "Assistance DCE",
                "Assistance consultation entreprises",
                "Suivi travaux",
                "Assistance r√©ception",
                "Autre"
            ],
            key="amo_perimetre",
            help="S√©lectionnez les phases couvertes par la mission"
        )
        
        if "Autre" in perimetre_mission:
            autre_perimetre = st.text_input(
                "Pr√©cisez autre p√©rim√®tre:",
                key="amo_autre_perimetre"
            )
    
    with col2:
        st.markdown("**üí∞ Conditions Mission**")
        
        montant_honoraires = st.number_input(
            "Montant honoraires (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=100.0,
            key="amo_honoraires",
            help="Montant total des honoraires AMO"
        )
        
        mode_remuneration = st.selectbox(
            "Mode de r√©mun√©ration",
            options=["", "Forfait", "Pourcentage travaux", "R√©gie", "Mixte"],
            key="amo_mode_remuneration"
        )
        
        st.markdown("**üìÖ Planning Mission**")
        
        date_debut_mission = st.date_input(
            "Date d√©but mission",
            value=None,
            key="amo_date_debut"
        )
        
        date_fin_mission = st.date_input(
            "Date fin mission pr√©vue",
            value=None,
            key="amo_date_fin"
        )
        
        # Calcul de la dur√©e de mission
        if date_debut_mission and date_fin_mission:
            duree_mission = (date_fin_mission - date_debut_mission).days
            if duree_mission > 0:
                st.info(f"Dur√©e mission : {duree_mission} jours ({duree_mission/30:.1f} mois)")
            elif duree_mission < 0:
                st.error("La date de fin doit √™tre post√©rieure √† la date de d√©but")
        
        # Calcul REM pour mission AMO
        if montant_honoraires > 0:
            st.markdown("**üí° REM Mission AMO**")
            # Pour AMO, la REM est directement li√©e aux honoraires
            rem_amo_annuelle = montant_honoraires  # Simplification : honoraires = REM sur p√©riode
            if date_debut_mission and date_fin_mission:
                duree_mois = max(1, (date_fin_mission - date_debut_mission).days / 30)
                rem_amo_mensuelle = montant_honoraires / duree_mois
                st.success(f"REM mission : {utils.format_currency(montant_honoraires)}")
                st.info(f"REM mensuelle estim√©e : {utils.format_currency(rem_amo_mensuelle)}")
            else:
                st.success(f"REM mission : {utils.format_currency(rem_amo_annuelle)}")

def render_mandat_specific_fields():
    """Champs sp√©cifiques pour les op√©rations en mandat"""
    
    st.markdown("#### üìú Sp√©cifique Op√©ration en Mandat")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• Mandant**")
        
        organisme_mandant = st.text_input(
            "Nom organisme mandant *",
            placeholder="Ex: Conseil D√©partemental de Guadeloupe",
            key="mandat_organisme",
            help="Organisme qui nous confie le mandat"
        )
        
        contact_signataire = st.text_input(
            "Contact signataire",
            placeholder="Nom et fonction",
            key="mandat_contact"
        )
        
        type_mandant = st.selectbox(
            "Type de mandant",
            options=["", "Conseil D√©partemental", "Conseil R√©gional", "Commune", "EPCI", "√âtat", "Autre collectivit√©", "Organisme public", "Autre"],
            key="mandat_type"
        )
        
        st.markdown("**üìã Convention Mandat**")
        
        objet_mandat = st.text_area(
            "Objet du mandat *",
            placeholder="D√©crivez l'objet du mandat...",
            key="mandat_objet",
            help="Description pr√©cise de la mission confi√©e",
            height=100
        )
        
        etendue_mission = st.multiselect(
            "√âtendue mission",
            options=[
                "√âtudes pr√©alables",
                "Montage op√©ration", 
                "Ma√Ætrise d'ouvrage compl√®te",
                "Assistance technique",
                "Gestion administrative",
                "Suivi financier",
                "Autre"
            ],
            key="mandat_etendue"
        )
    
    with col2:
        st.markdown("**üí∞ Conditions Financi√®res**")
        
        budget_operation = st.number_input(
            "Budget op√©ration (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=1000.0,
            key="mandat_budget",
            help="Budget total de l'op√©ration mandat√©e"
        )
        
        remuneration_spic = st.number_input(
            "R√©mun√©ration SPIC (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=100.0,
            key="mandat_remuneration",
            help="R√©mun√©ration SPIC pour le mandat"
        )
        
        mode_remuneration = st.selectbox(
            "Mode r√©mun√©ration",
            options=["", "Forfait", "Pourcentage budget", "R√©gie", "Mixte"],
            key="mandat_mode_remuneration"
        )
        
        st.markdown("**üìÖ Dur√©e & √âch√©ances**")
        
        date_signature_convention = st.date_input(
            "Date signature convention",
            value=None,
            key="mandat_date_signature"
        )
        
        duree_mandat_mois = st.number_input(
            "Dur√©e du mandat (mois)",
            min_value=1,
            value=12,
            key="mandat_duree",
            help="Dur√©e pr√©vue du mandat en mois"
        )
        
        # Calcul date fin mandat
        if date_signature_convention and duree_mandat_mois:
            from datetime import timedelta
            date_fin_mandat = date_signature_convention + timedelta(days=duree_mandat_mois * 30)
            st.info(f"Fin mandat pr√©vue : {utils.format_date_fr(date_fin_mandat.isoformat())}")
        
        # Calcul REM mandat
        if remuneration_spic > 0 and duree_mandat_mois > 0:
            st.markdown("**üí° REM Mandat**")
            rem_annuelle_mandat = (remuneration_spic / duree_mandat_mois) * 12
            rem_mensuelle = remuneration_spic / duree_mandat_mois
            
            st.success(f"REM annuelle √©quivalente : {utils.format_currency(rem_annuelle_mandat)}")
            st.info(f"REM mensuelle : {utils.format_currency(rem_mensuelle)}")
            
            # Pourcentage sur budget si disponible
            if budget_operation > 0:
                pourcentage_budget = (remuneration_spic / budget_operation) * 100
                st.info(f"R√©mun√©ration = {pourcentage_budget:.2f}% du budget op√©ration")

def get_specific_fields_data(type_operation: str) -> dict:
    """R√©cup√®re les donn√©es des champs sp√©cifiques depuis session_state"""
    
    data = {}
    
    if type_operation == "OPP":
        data.update({
            'nb_lls': st.session_state.get('opp_nb_lls', 0),
            'nb_llts': st.session_state.get('opp_nb_llts', 0),
            'nb_pls': st.session_state.get('opp_nb_pls', 0),
            'budget_total': st.session_state.get('opp_budget_total', 0.0),
            'cout_foncier': st.session_state.get('opp_cout_foncier', 0.0),
            'cout_travaux_estime': st.session_state.get('opp_cout_travaux', 0.0),
            'adresse_terrain': st.session_state.get('opp_adresse', ''),
            'surface_terrain_m2': st.session_state.get('opp_surface', 0.0),
            'date_debut_etudes': st.session_state.get('opp_date_debut_etudes').isoformat() if st.session_state.get('opp_date_debut_etudes') else None
        })
    
    elif type_operation == "VEFA":
        promoteur = st.session_state.get('vefa_promoteur', '')
        if not promoteur:
            promoteur = st.session_state.get('vefa_promoteur_autre', '')
        
        data.update({
            'promoteur': promoteur,
            'nb_logements_total': st.session_state.get('vefa_nb_reserves', 0),
            'budget_total': st.session_state.get('vefa_prix', 0.0)
        })
    
    elif type_operation == "AMO":
        data.update({
            'budget_total': st.session_state.get('amo_honoraires', 0.0),
            'date_debut_etudes': st.session_state.get('amo_date_debut').isoformat() if st.session_state.get('amo_date_debut') else None
        })
    
    elif type_operation == "MANDAT":
        data.update({
            'budget_total': st.session_state.get('mandat_budget', 0.0)
        })
    
    return data

# ============================================================================
# NAVIGATION ET ROUTING
# ============================================================================

def render_sidebar():
    """Sidebar de navigation moderne et intuitive"""
    
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; color: white; margin-bottom: 1rem;">
            <h2 style="margin: 0;">üèóÔ∏è SPIC 2.0</h2>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">Suivi Op√©rations</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Menu principal
        st.markdown("### üìä Navigation")
        
        # Boutons de navigation avec ic√¥nes
        nav_buttons = [
            ("dashboard_manager", "üìä Dashboard Manager", "Vue d'ensemble et TOP 3 risques"),
            ("aco_view", "üë§ Vue Charg√© d'Op", "Interface personnalis√©e ACO"),
            ("creation_operation", "‚ûï Cr√©er Op√©ration", "Nouvelle op√©ration"),
        ]
        
        for page_key, label, description in nav_buttons:
            is_current = st.session_state.current_page == page_key
            
            if st.button(
                label,
                key=f"nav_{page_key}",
                use_container_width=True,
                type="primary" if is_current else "secondary"
            ):
                st.session_state.current_page = page_key
                st.session_state.operation_detail_id = None  # Reset detail view
                st.rerun()
            
            if is_current:
                st.markdown(f"*{description}*")
        
        st.markdown("---")
        
        # Informations syst√®me
        st.markdown("### ‚öôÔ∏è Syst√®me")
        
        # Statut base de donn√©es
        try:
            db = init_database()
            stats = db.get_database_stats()
            
            if stats:
                st.markdown("**üìä Statistiques Base**")
                st.metric("Op√©rations", stats.get('total_operations', 0))
                st.metric("Phases", stats.get('total_phases', 0))
                st.metric("Alertes", stats.get('total_alertes', 0))
                
                if stats.get('taille_db_mo', 0) > 0:
                    st.metric("Taille DB", f"{stats['taille_db_mo']:.1f} MB")
        except Exception as e:
            st.error(f"Erreur stats DB : {e}")
        
        # Cache et performance
        if st.button("üîÑ Vider Cache", use_container_width=True):
            utils.clear_streamlit_cache()
            add_notification("Cache vid√©", "success")
            st.rerun()
        
        # Raccourcis rapides
        st.markdown("### ‚ö° Raccourcis")
        
        if st.button("üö® Alertes Actives", use_container_width=True):
            # TODO: Impl√©menter vue alertes
            add_notification("Vue alertes en d√©veloppement", "info")
        
        if st.button("üì§ Export Donn√©es", use_container_width=True):
            # TODO: Impl√©menter export global
            add_notification("Export global en d√©veloppement", "info")
        
        # Informations de session
        st.markdown("---")
        st.markdown("### üîç Session Info")
        
        if st.session_state.get('selected_aco'):
            st.markdown(f"**ACO:** {st.session_state.selected_aco}")
        
        if st.session_state.get('operation_detail_id'):
            st.markdown(f"**Op. D√©tail:** ID {st.session_state.operation_detail_id}")
        
        st.markdown(f"**Derni√®re MAJ:** {st.session_state.last_refresh.strftime('%H:%M')}")
        
        # Version et aide
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #6b7280; font-size: 0.8rem;">
            <p>Version 2.0.0<br>
            Interface √©pur√©e et collaborative</p>
        </div>
        """, unsafe_allow_html=True)

def main():
    """Fonction principale de l'application Streamlit"""
    
    # Initialisation
    init_session_state()
    display_notifications()
    
    # Sidebar
    render_sidebar()
    
    # Contenu principal selon la page
    current_page = st.session_state.current_page
    
    try:
        if current_page == "dashboard_manager":
            render_dashboard_manager()
        
        elif current_page == "aco_view":
            render_aco_view()
        
        elif current_page == "creation_operation":
            render_creation_operation()
        
        elif current_page == "detail_operation":
            render_operation_detail()
        
        else:
            st.error(f"Page inconnue : {current_page}")
            st.session_state.current_page = "dashboard_manager"
            st.rerun()
    
    except Exception as e:
        st.error(f"Erreur lors du rendu de la page : {e}")
        st.markdown("**D√©tails de l'erreur :**")
        st.code(str(e))
        
        # Bouton de retour au dashboard
        if st.button("üè† Retour au Dashboard"):
            st.session_state.current_page = "dashboard_manager"
            st.rerun()
    
    # Footer avec informations utiles
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("üîÑ **Auto-refresh** : Toutes les 5 minutes")
    
    with col2:
        st.markdown(f"‚è∞ **Derni√®re actualisation** : {st.session_state.last_refresh.strftime('%d/%m/%Y %H:%M')}")
    
    with col3:
        if st.button("üîÑ Actualiser maintenant"):
            st.cache_data.clear()
            st.session_state.last_refresh = datetime.now()
            add_notification("Donn√©es actualis√©es", "success")
            st.rerun()
    
    # Auto-refresh toutes les 5 minutes
    if (datetime.now() - st.session_state.last_refresh).seconds > 300:  # 5 minutes
        st.session_state.last_refresh = datetime.now()
        st.cache_data.clear()
        st.rerun()

# ============================================================================
# POINT D'ENTR√âE
# ============================================================================

if __name__ == "__main__":
    main()